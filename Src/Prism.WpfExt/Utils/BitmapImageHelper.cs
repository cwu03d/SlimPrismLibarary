

using System;
using System.IO;
using System.Windows.Media.Imaging;

namespace Prism.WpfExt;

public static class BitmapImageHelper
{
    /// <summary>
    /// This routine works for all image data as long as they are properly decodered.
    /// Since the codec as well as image dimension are already embedded inside the byte array, the format info is not required.
    /// CreateBitmapWithDecoder is another version do the same job, but requires explicit image format info.
    /// </summary>
    /// <param name="imageData">The compressed image data in byte array generated by an encoder.</param>
    /// <returns></returns>
    public static BitmapImage CreateBitmapImageFromEncodedData(byte[] imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return null;
        }

        var image = new BitmapImage();
        using (var mem = new MemoryStream(imageData))
        {
            mem.Position = 0;
            image.BeginInit();
            image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;
            image.CacheOption = BitmapCacheOption.OnLoad;
            image.UriSource = null;
            image.StreamSource = mem;
            image.EndInit();
        }
        image.Freeze();
        return image;
    }

    /// <summary>
    /// This routine works for bytes[] serialized as long as the image type is specified.
    /// It is samliar with the CreateBitmapImageFromEncodedData, except the image type info for decoding the data.
    /// </summary>
    /// <param name="data"> The compressed image data in byte array generated by an encoder.</param>
    /// <param name="imgType"> image type used to resolve the decoder</param>
    /// <returns></returns>
    public static BitmapSource CreateBitmapWithDecoder(byte[] data, ImageTypeEnum imgType)
    {
        MemoryStream mstream = new MemoryStream(data);
        BitmapDecoder decoder = null;
        if (imgType == ImageTypeEnum.BMP)
        {
            decoder = new BmpBitmapDecoder(mstream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default);
        }
        else if (imgType == ImageTypeEnum.PNG)
        {
            decoder = new PngBitmapDecoder(mstream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default);
        }
        else if (imgType == ImageTypeEnum.JPG)
        {
            decoder = new JpegBitmapDecoder(mstream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default);
        }
        else
        {
            throw new NotSupportedException("Image type is not supported: " + imgType.ToString());
        }

        BitmapSource bmpSrc = decoder.Frames[0];

        return bmpSrc;
    }

}
